@page "/"

<MudGrid Class="flex-column mt-4" Justify="Justify.Center">
  <MudButtonGroup Class="justify-center" OverrideStyles="@false">
    @foreach (int i in Enum.GetValues(typeof(ESortType)))
    {
      if (i < 0)
      {
        continue;
      }

      ESortType sort = (ESortType)i;
      bool bSelectedSort = (int)mController.SelectedSort == i;

      <MudButton Variant="Variant.Text" Color="bSelectedSort ? Color.Primary : Color.Default" Disabled="hasSort" OnClick="@(() => handleSortClick(sort))" Style="@(bSelectedSort ? $"border-bottom: 1px solid {Colors.DeepPurple.Accent3};" : string.Empty)">@sort.ToString()</MudButton>
    }
  </MudButtonGroup>

  <Display Controller="@mController" DurationInMilliseconds="@mDurationInMilliseconds" />

  <div class="d-flex align-self-center align-center">
    <MudTooltip Text="Skip Back">
      <MudIconButton Icon="@Icons.Material.Filled.SkipPrevious" Color="@Color.Inherit" Disabled="@(!canSkipBack || mbSorting)" OnClick="@handleSkipBackClick" />
    </MudTooltip>
    <MudTooltip Text="Step Back">
      <MudIconButton Icon="@Icons.Material.Filled.Undo" Color="@Color.Inherit" Disabled="@(!canSkipBack || mbSorting)" OnClick="@handleStepBackClick" />
    </MudTooltip>
    <MudTooltip Text="@(mbPaused ? "Play" : "Pause")">
      <MudIconButton Icon="@(mbPaused ? Icons.Material.Filled.PlayArrow : Icons.Material.Filled.Pause)" Color="@Color.Inherit" Disabled="@(!hasSort || mController.IsFullySorted)" OnClick="@handlePauseClick" />
    </MudTooltip>
    <MudTooltip Text="Step Forward">
      <MudIconButton Icon="@Icons.Material.Filled.Redo" Color="@Color.Inherit" Disabled="@(!hasSort || mController.IsFullySorted || mbSorting)" OnClick="@handleStepForwardClick" />
    </MudTooltip>
    <MudTooltip Text="Skip Forward">
      <MudIconButton Icon="@Icons.Material.Filled.SkipNext" Color="@Color.Inherit" Disabled="@(!hasSort || mbSorting || mController.IsFullySorted)" OnClick="@handleSkipForwardClick" />
    </MudTooltip>
    <MudTooltip Text="Randomize Numbers">
      <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="@Color.Inherit" Disabled="@(!mbPaused)" OnClick="@handleRandomizingClick" />
    </MudTooltip>

    <MudSlider Min="0" Max="9" @bind-Value="@speed" Step="1" Color="Color.Primary" Class="mx-2">Speed</MudSlider>
    <MudSlider Min="10" Max="50" @bind-Value="@barCount" Step="10" Color="@Color.Primary" Disabled="@hasSort" Class="mx-2">Number of Bars</MudSlider>
  </div>
</MudGrid>


@code {
  private const int MAX_DURATION_IN_MILLISECONDS = 2000;
  private const int DEFAULT_DURATION_IN_MILLISECONDS = 1000;
  private const int DEFAULT_NUMBER_COUNT = 20;

  private Controller mController = new(DEFAULT_NUMBER_COUNT);
  private int mDurationInMilliseconds = DEFAULT_DURATION_IN_MILLISECONDS;
  private bool mbPaused = true;
  private bool mbSorting = false;

  private int comparingDurationInMilliseconds => mDurationInMilliseconds / 2;
  private int speed
  {
    get => (MAX_DURATION_IN_MILLISECONDS - mDurationInMilliseconds) / (MAX_DURATION_IN_MILLISECONDS / 10);
    set
    {
      mDurationInMilliseconds = MAX_DURATION_IN_MILLISECONDS - value * (MAX_DURATION_IN_MILLISECONDS / 10);
    }
  }
  private int barCount
  {
    get => mController.Numbers.Count;
    set
    {
      mController.RandomizeNumbers(value);
    }
  }
  private bool hasSort => mController.SelectedSort != ESortType.None;
  private bool canSkipBack => hasSort || mController.IsFullySorted;

  private void handleRandomizingClick()
  {
    mController.RandomizeNumbers(mController.Numbers.Count);

    mController.Initialize();
  }

  private void handleSkipBackClick()
  {
    mbPaused = true;

    mController.InitializeWithBackup();
  }

  private void handleStepBackClick()
  {
    _ = stepBackAsync();
  }

  private void handlePauseClick()
  {
    mbPaused = !mbPaused;

    if (!mbPaused)
    {
      _ = sortAsync();
    }
  }

  private void handleStepForwardClick()
  {
    _ = stepForwardAsync();
  }

  private void handleSkipForwardClick()
  {
    mbSorting = true;

    while (!mController.IsFullySorted)
    {
      mController.StepForward();
    }

    mController.IsSwapped = false;

    mbSorting = false;
  }

  private void handleSpeedInput(ChangeEventArgs e)
  {
    if (e.Value is not null)
    {
      mDurationInMilliseconds = MAX_DURATION_IN_MILLISECONDS - int.Parse(e.Value.ToString()!) * (MAX_DURATION_IN_MILLISECONDS / 10);
    }
  }

  private void handleSortClick(ESortType sortType)
  {
    if (hasSort)
    {
      return;
    }

    mController.ChangeSort(sortType);

    mbPaused = false;

    _ = sortAsync();
  }

  private async Task sortAsync()
  {
    while (!mController.IsFullySorted && !mbPaused)
    {
      await stepForwardAsync();
    }
  }

  private async Task stepForwardAsync()
  {
    mbSorting = true;
    StateHasChanged();

    mController.StepForward();
    StateHasChanged();

    await delayAsync();

    mbSorting = false;
    StateHasChanged();
  }

  private async Task stepBackAsync()
  {
    mbSorting = true;
    StateHasChanged();

    mController.StepBack();
    StateHasChanged();

    await delayAsync();

    mbSorting = false;
    StateHasChanged();
  }

  private async Task delayAsync()
  {
    if (mController.IsSwapped || mController.IsMoved)
    {
      await Task.Delay(mDurationInMilliseconds);

      mController.IsSwapped = false;
      mController.IsMoved = false;
    }
    else
    {
      await Task.Delay(comparingDurationInMilliseconds);
    }
  }
}