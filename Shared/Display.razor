@{
  int numberCount = Controller.Numbers.Count;
  int adjuster = numberCount / 10;
  int barWidth = MAX_BAR_WIDTH / (numberCount / 10);
  int barMargin = MAX_BAR_MARGIN - adjuster;
}

<MudGrid Class="flex-nowrap my-5" Justify="Justify.Center">
  @for (int i = 0; i < numberCount; i++)
  {
    Tuple<int, int>
      highlightedIndices = Controller.ComparedIndices;
    List<bool>
      bSortedNumbers = Controller.HasSortedNumbers;

    string backgroundColor = bSortedNumbers[i] ? SORTED_BAR_COLOR : DEFAULT_BAR_COLOR;

    if (i == highlightedIndices.Item1 || i == highlightedIndices.Item2)
    {
      backgroundColor = COMPARED_BAR_COLOR;
    }

    Tuple<int, int>
      animatedIndices = Controller.SwappedIndices;
    string? containerStyle = null;

    if (isSwapAnimated)
    {
      if (i == animatedIndices.Item1)
      {
        backgroundColor = SWAP_ANIMATED_BAR_COLOR;
        containerStyle = $"animation: swap1 {DurationInMilliseconds}ms linear;";
      }
      else if (i == animatedIndices.Item2)
      {
        backgroundColor = SWAP_ANIMATED_BAR_COLOR;
        containerStyle = $"animation: swap2 {DurationInMilliseconds}ms linear;";
      }
    }
    else if (isMoveAnimated)
    {
      Tuple<int, int>
        ? tuple =
        Controller.MovedIndices.FirstOrDefault(tuple => tuple.Item2 == i);

      if (tuple is not null)
      {
        int gap = tuple.Item1 - tuple.Item2;

        backgroundColor = MOVE_ANIMATED_BAR_COLOR;
        containerStyle = $"animation: move{gap} {DurationInMilliseconds}ms linear;";
      }
    }

    int number = Controller.Numbers[i];
    int height = number * 2;

    containerStyle += $"margin: 10px {barMargin}px";
    string barStyle = $"background-color: {backgroundColor}; width: {barWidth}px; height: {height}px;";
    string fontStyle = $"font-size: {MAX_BAR_FONT_SIZE - adjuster}px";
    string key = $"{i}{backgroundColor}{containerStyle}";

    <Bar @key="@key" Number="@number" ContainerStyle="@containerStyle" BarStyle="@barStyle" FontStyle="@fontStyle" />
  }
</MudGrid>

@{
  int width = barWidth + barMargin * 2;
}

@if (isSwapAnimated)
{
  Tuple<int, int> indices = Controller.SwappedIndices;

  <style>
    @@keyframes swap1 {
      0% {
        transform: translateX(@($"{(indices.Item2 - indices.Item1) * width}px"))
      }
      100% {
        transform: translateX("0px")
      }
    }

    @@keyframes swap2 {
      0% {
        transform: translateX(@($"{(indices.Item1 - indices.Item2) * width}px"))
      }
      100% {
        transform: translateX("0px")
      }
    }
  </style>
}
else if (isMoveAnimated)
{
  IEnumerable<int> gaps = Controller
    .MovedIndices
    .Select(tuple => tuple.Item1 - tuple.Item2)
    .Distinct();

  @foreach (int gap in gaps)
  {
    <style>
      @@keyframes @($"move{gap}") {
        0% {
          transform: translateX(@($"{gap * width}px"))
        }
        100% {
          transform: translateX("0px")
        }
      }
    </style>
  }
}

@code {
  const string DEFAULT_BAR_COLOR = "DarkGray";
  const string COMPARED_BAR_COLOR = "Crimson";
  const string SORTED_BAR_COLOR = "DarkSlateBlue";
  const string SWAP_ANIMATED_BAR_COLOR = "LightGreen";
  const string MOVE_ANIMATED_BAR_COLOR = "RosyBrown";

  const int MAX_BAR_WIDTH = 40;
  const int MAX_BAR_MARGIN = 7;
  const int MAX_BAR_FONT_SIZE = 16;

  [Parameter]
  public Controller Controller { get; set; }
  [Parameter]
  public int DurationInMilliseconds { get; set; }

  private bool isSwapAnimated => Controller.IsSwapped;
  private bool isMoveAnimated => Controller.IsMoved;
}
